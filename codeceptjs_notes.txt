codecept tutorial
-----------------
-----------------
-----------------

It is a automation tool for web and mobile.


Link:
https://www.youtube.com/watch?v=tvTQTxShx28&list=PLdBaEcWYGDLJbFJvZkO7fPSm_ZkA6FtGz&index=1



Tutorial 1: Introduction, setup, Writing first test, creating codecept project using puppeteer //This is for first two video for the above playlist
----------------------------------------------------
Official web address: https://codecept.io/
We can see advantages in above official page.
Has advantages like readable, same code for internal puppeteer, webdriver, appium etc, interactive debugging, can give any locator, easy for page object model, 
can use for web and mobile, cucumber like bdd, has beautiful and can integrate with allure report, manage test data and clean up with api, parallel execution, multisession(different browser or different device), reduce flackiness using retry option

Pre Setup:
1. Required node and npm to be installed. Download installer from official node site. https://nodejs.org/en/download/ . And install it. Check the version using the command node -v, npm -v
2. Use any IDE. VS code is preffered for javascript.
3. Javascript. Should know basics of javascript language.


To create fresh project:
1.Create a folder for project. Give folder name as project name. 
mkdir qaautomation
2. Go inside the folder
cd qaautomation
3. Use below command to create npm project
npm init 
or
npm init -y
4. Add below packages for installing codecept
npm install codeceptjs puppeteer --save-dev
5. Use below command to make this npm project to codecept project. Give required input when it asks details
npx codeceptjs init
//it will create all required files. codecept.conf.ts has all configuration. Here we can give web url, test folder, output folders and more config etc.
//Select Puppeteer when asks for "What helpers do you want to use?"
6. Use below command to run the test.
npx codeceptjs run
or
npx codeceptjs run --steps 
//--steps will show each steps while running.


All configuration will be saved in codecept.conf.js

Below is the codecept.conf.js file after creation:

const { setHeadlessWhen, setCommonPlugins } = require('@codeceptjs/configure');
setHeadlessWhen(process.env.HEADLESS);
setCommonPlugins();
exports.config = {
  tests: './*_test.js',
  output: './output',
  helpers: {
    Puppeteer: {
      url: 'https://opensource-demo.orangehrmlive.com',  //Here you can give the web link
      show: true,                     //here we can give true or false to show the browser
      windowSize: '1200x900'
    }
  },
  include: {
    I: './steps_file.js'
  },
  name: 'tutorial1FreshProject'
}



Below is the sample test:

Feature('login');

Scenario('login with valid credential and verify',  ({ I }) => {
    I.amOnPage('/');
    I.wait(5);
    I.seeElement("//*[@id='app']/div[1]/div/div[1]/div/div[2]/h5");
    I.fillField('//input[@name="username"]', "Admin");
    I.fillField('//input[@name="password"]', "admin123");
    I.click('//button[@type="submit"]');
    I.wait(5);
});



----



Tutorial 2: Codecept js with Webdriverio
--------------------
webdriverio is good for cross browser testing
It uses selenium web driver

Use below command to create codecept project using webdriverio

create a folder for the project. Go inside the folder and give below command
npm init -y          //To make the current directory as npm project
npm install codeceptjs webdriverio --save-dev           //To add codecept and webdriverio dependencies
npx codeceptjs init            //To make the current project to codecept project 
//Select WebDriver when asks for "What helpers do you want to use?"
npm install @wdio/selenium-standalone-service --save-dev       // We need selenium standalone service for webdriverio      //To install the selenium-standalone-service. This is needed only when we create codecept with webdriverio


Add below plugin in codecept.conf.js  //It is needed because, then only it will auto start the selenium standalone service when running.
plugins: {
    wdio: {
      enabled: true,
      services: ['selenium-standalone']
    }
  }



Below is the codecept.conf.js file after creation:

const { setHeadlessWhen, setCommonPlugins } = require('@codeceptjs/configure');
setHeadlessWhen(process.env.HEADLESS);
setCommonPlugins();
exports.config = {
  tests: './*_test.js',
  output: './output',
  helpers: {
    WebDriver: {
      url: 'https://opensource-demo.orangehrmlive.com',
      browser: 'chrome'       //Here we can change the browser
    }
  },
  include: {
    I: './steps_file.js'
  },
  name: 'tutorial2FreshCodeCeptWithWebDriverIo',
  plugins: {
    wdio: {              //This is plugin is used to start the selenium-standalone service automatically.
      enabled: true,
      services: ['selenium-standalone']
    }
  }
}

Note: 
If you face any issue, use "^7.26.0" for @wdio/selenium-standalone-service Eg: "@wdio/selenium-standalone-service": "^7.26.0"
and "^7.27.0" for webdriverio in dev-dependencies in package.json Eg: "webdriverio": "^7.27.0"


Test case file remain same as above.


----


Tutorial 3: Codecept with playwriter
------------------------------------
Playwright is new driver developed by microsoft.
Its a node library which will be used to automate chromium(chrome and edge), webkit(safari) and firefox browsers with single api
Its good for cross browser testing
build simular to puppeteer


Use below command to create codecept project using webdriverio

create a folder for the project. Go inside the folder and give below command
npm init -y          //To make the current directory as npm project
npm install codeceptjs playwright --save-dev           //To add the codecept and playwright dependencies
npx codeceptjs init            //To make the current project to codecept project 

Add the test and run using below command
npx codeceptjs run.


codecept.conf.js file looks like below after initialising the project

const { setHeadlessWhen, setCommonPlugins } = require('@codeceptjs/configure');
setHeadlessWhen(process.env.HEADLESS);
setCommonPlugins();
exports.config = {
  tests: './*_test.js',
  output: './output',
  helpers: {
    Playwright: {
      url: 'https://opensource-demo.orangehrmlive.com',
      show: true,
      browser: 'chromium'      //Here we can change the browser Eg: firefox or chromium or webkit
    }
  },
  include: {
    I: './steps_file.js'
  },
  name: 'tutorial3FreshCodeCeptWithPlaywright'
}


------


Tutorial 4: Writing test cases - opening webpage, locating element, fill fields, click elements, assertion, grab values, select option, smart wait etc
----------------------------------

For going to the link we can use amOnPage function=
I.amOnPage function will be used to opening the webpage, navigation using url or opening web using link
I.amOnPage(/) - This is for opening the web page. It will read the url form codecept.conf.js file
I.amOnPage(/contact) - This is open navigating to page using the end point. It will take the base url from codecept.conf.js and append with this value Eg: https://kns.com/contact
I.amOnPage(https://google.com/con?q=hai) - This will override the value in codecept.conf.js. It will directly opens the given link



For giving the locator in function,
We can directly give the xpath
We can directly give the css selector
For giving the ide, we need to give #idname



fillField function is used to give the text in the element
I.fillField('//input[@name="username"', "test@gmail.com")
I.fillField('#pass', "test@gmail.com")



click function can be used to click the button
I.click('//button[@type="submit"]')


see and dontSee function can be used to assert the visibile and not visible element
I.see("Login") - assertion to check whether the text is visibile or not
I.dontSee("Login") - assertion to check whether the text is not visibile



wait function is used to give the wail
I.wait(2) - this will wait for 2 sec



grabTextFrom function can be used to get the text of the element
I.grabTextFrom('//div/span')
IMPORTANT:
grabTextFrom should be used only with await. Also that function should be async
Eg:
Scenario('login with valid credential and verify',  async({ I }) => {  //async should be used before the method
	let val = await I.grabTextFrom('//div/span');   //await should be used before grabTextFrom
	console.log(val)
}



selectOption function can be used to select the option in the list
selectOption('give the element', 'give the visible text here')
Eg:
I.selectOption('//div/li', "India")


waitFor is the smart wait
waitForText is the smart wait till the element present. we will give the max wait time as well. if the elemnt is visible the quickly it move to next step
waitForText('give the element here', maximum waiting sex)
Eg:
I.waitForText('Login', 20) - Here it will wait till the Login text is visible. Maximum it will wait till 20 sec.




We can add multiple Scenario in each test file. Meaning multiple tests in each file.
We can point the test file in codecept.conf.js Eg: tests: './*Tests.js'



-----


Tutorial 5: Run Options - Run filename, run --steps, run --grep, run --multiple, --multiple Browser, Run-workers, Run --debug, Run --verbose
--------------------

npx codeceptjs run   //This is to run all the tests
npx codeceptjs run testfilename.js      //This is to run tests available in the given file
npx codeceptjs run testfilename.js --steps   // --steps is to to print the steps while running
npx codeceptjs run --grep 'scenario name'     // --grep 'name of scenario'    This is to run particular test(scenario)


Add below line in codecept.conf.js to run the test parallelly
multiple: {
	parallel: {
		chunks: 2   //This is for running the test parallelly with 2 threads
	}
}

npm codeceptjs run-multiple --all  //Run on multiple sessions       //It split the test to multiple browser  //It will split based on test files


we can give different browser also like below

multiple: {
	parallel: {
		chunks: 2,   //This is for running the test parallelly with 2 threads
		browsers: ["chrome", "firefox"]   //can give multipe browser
	}
}

npm codeceptjs run-multiple --all   //Now as per above, chrome and firefox will launch with each 2 instances. Totally 4 instances. And the test will be splitted 


npm codeceptjs run-workers 3   // 3 session will be running. and test cases will be splitted to 3 sessions
worker split the thread by test cases. not by test file      //It will split based on test cases


run-multiple will pick the file and run in one browser(Split based on file). run-worker will pick the tes case and run in one browser(Split based on test)



npx codeceptjs run --debug         // --debug will give high level debug logs. It will give more information running or failing

npx codeceptjs run --verbose       // --verbose will give more and more details. including internal logs. If we are unable to find in debug mode then we can run in verbose 






------


Tutorial 6: Report - cli, xml - mocha junit report, html - mochawesome report, step by step report and allure
---------------------------
We have below types of report
cli
xml(mocha junit report)
html(mochawesome report)
step by step
allure


cli:
cli - is the command line report when we run using the command like below
npx codeceptjs run --steps   //When using --steps it will print the steps. its the cli report


xml(mocha junit report):
Use below command to install moch junit report dependencies
npm i mocha-junit-reporter --save-dev
After installing we should see mocha: {} in codecept.conf.js

add reporterOptions in mocha like below
mocha: {
	reporterOptions: {
		mochaFile: "output/result.xml"           //it will generate the report xml file in given folder
	}
}

We can use below command to run the test and generate xml report.
npx codeceptjs run --reporter mocha-junit-reporter
//This will generate report in given folder Eg: output/result.xml
//Its not the html. its xml. this xml report will help in cicd



html (mochawesome report):
Use below command to install its dependencies
npm i mochawesome --save-dev

add reporterOptions in mocha like below
mocha: {
	reporterOptions: {
		mochaFile: "output/result.xml",           //it will generate the report xml file in given folder
		reportDir: "output"             //folder where the html report should be generated
	}
}

Use below command to run the test and generate html report
npx codeceptjs run --reporter mochawesome
//this will generate the html report after test run. We can see this html file in given output folder



step by step report:
step by step report will capture screenshot in each step. if success it will delete. if not success it will keep the screenshot
to configure, add stepByStepReport inside plugins in codecept.conf.js like below
stepByStepReport: {
	enabled: true,              //to enable or disable step by step report. It will capture screenshot for each step
	deleteSuccessful: false     //Whether we wanted to delete the screenshot if the successfull. If we give true, it will delete the screenshot of successfull step and capture only for failed one. If we give false, it wont delete for both success and failure steps
}

as we are giving and enabling in plugins, it will capture the screenshot automatically after each step
npx codeceptjs run   //if we give in plugin, just run command is enough to run the test and take step by step report which is screenshot
//screenshots will be saved in output folder. It will create folder for each test and save all screenshot. 
We can open the folder of each test and open index.html and see each step and its screenshot



allure report:
To add allure report install below dependencies
npm install -g allure-commandline --save-dev  //If allure is already installed in you system, it will give error with exists
to configure, allure inside plugins in codecept.conf.js like below
allure: {
	enabled: true
}

npx codeceptjs run  //Use this command to run the test. and it will generate allure result in xml/json in output folder.
Give below command open allure report in browser
allure serve output  //this will open the allure report in browser

We can include screenshot of step by step in allure report. To configure give below in plugins.

plugins: {
stepByStepReport: {
	enabled: true,
	screenshotsForAllureReport: true
  },
allure: {
	enabled: true
  }
}

now run the test and //npx codeceptjs run
generate allure report //allure serve output
Now we can see the screenshots in allure report


--------

Tutorial 7: Codeceptjs with BDD - Initiate BDD, Feature file, Scenario, Given when then, step files, Background, Parameterisation, Tables, Tags, Configuration
-----------------------------------------
BDD - Behvariour Driver Development.
Test cases are in simple english and it will be easy to read.
Test cases are written in Given, When and tThen format

Feature file and Step file will be added in each of its folder


To initiate codecept with BDD give below command
npx codeceptjs gherkin:init
//It willl initiate BDD
//Now we can find below and few more in codecept.conf.js
gherkin: {
    features: './features/*.feature',
    steps: ['./step_definitions/steps.js']
  }
It will add features folder which has feature files
It will add step_definitions folder which has step files
It will have sample feature and step file


Feature is the file where we will write write the test cases.
Feature file extension should be .feature
Feature meaning feature. Eg: Login feature, Product details etc
Feature will have multiple scenarios
Scenario is like test cases. Eg: login with valid credential and validate
Step is the file which will used to map the feature.
It will mapped by using given sentences in both the places.
Codecept will automatically map the scentences in feature to sentences in the step file
In step file we will use Given, When, Then functions which will be help for mapping. 
For And in feature file we can also give Then in step


To run the tests, use below command
npx codeceptjs run --features
//This command will be used to run the tests in feature files


We can add multipe tests cases by adding multiple scenarios.

We can pass the value from feature I below
Eg:
	Then I should see "Ram"

The value will be read in step file like below
Eg:
	Then('I should see "{word}"', (username) => {    //It will get in the  datatype word and pass to username. It can be word or int or other datatype. other than given datatypee in bbb. dont use other.
		console.log(username);       //I can use the username here which I get from feature which is Ram
		I.see(username);
	})

{word} - this is just accept only one word. we cannot pass more than one word or sentences.
 \"([^\\"]*)\" - This will accept more words or sentences. 
 Eg: 
 Then(/I should see the \"([^\\"]*)\" texts/, (sent) => {
 	I.see(sent);
 })
 {int} - this is accepting the number



Use below command to create BDD project
Create the folder with project name. Eg: mkdir WebAutomation
Go inside the folder. Eg: cd WebAutomation
Give below command to make this project folder as npm project
npm init -y
Use below command to download dependencies
npm install codeceptjs playwright --save     //instead of playwright we can use other helper also. Eg: puppeteer or webdriverio etc
Use below command to make the project as codecept project
npx codeceptjs init
Use below command to make the codeceptjs project with bdd
npx codeceptjs gherkin:init       //It will create features folder and step_definitions folder which is required for bdd, with some sample files
Now add your/modify your feature file and step file
Now run the tests using below command
npx codeceptjs run --features




Background: Login functionality               //Background will be added to feature file when we wanted to do set of steps before each tests. This is simular to BeforeMethod. so that we dont wanted to add repeating steps to each and every tests. Eg: login. Background also we will mension Given, when and then etc
	Given: I have valid credential
	Then I should able to login
	AND I should come to home page            //AND can be used instead of multiple Then. But in step file we will mension as Then() only



Tables:
we can pass entire table in one shot
or
we can pass one parameter from a table

To pass table from feature file, we can give like below. It will start with pipe symbol. It wont consider spaces between pipe and words in table
Eg:
Then I should see employee details
| id   | name  | email         |
| 5001 | Kumar | kum@gmail.com |
| 5002 | Raju  | raj@gmail.com |


To get entire table use like below
Then('I should see employee details', (table) => {
	for(const record in table.rows) {
		if(record<1){
			continue;
		}
		const cellValue = table.rows[record].cells;
		const id = cellValue[0].value;
		const name = cellValue[1].value;
		const email = cellValue[2].value;
		I.see(name)
		I.say(email)   // I.say is just to print the value
		I.say(id)
	}
})




Tags - Tags are annotation to group the test. We can use annotation symbol to add the tag
Tagname should be given above scenario
Eg:
@MyTest

To run the tag, use command like below
npx codeceptjs run --grep '@MyTest'
npx codeceptjs run --features --grep '@MyTest'
//This will run the scenario which has tag name as MyTest



Scenario level parameter 
It is pass the value of parameter in each iteration

Scenario Outline: Login to web and using parameterisation  //this entire scenario will run for the given number of times as per examples
	Given I go to PIM
	Then I should see "<email>"                     //every run of scenario will pass the values of each two rows one by one. In first run of this scenario email will be kum@gmail.com, then the next run of the scenario it will be raj@gmail.com         
	Examples:
		| id   | name  | email         |
		| 5001 | Kumar | kum@gmail.com |
		| 5002 | Raju  | raj@gmail.com |




Configuration:
In codecept.conf.js we can find the path configuration of feature and  step file like below. If need we can change this.
gherkin: {
	features: './features/*.feature',
	steps: ['./step_definitions/steps.js']     //This is comma seperator. we can add multiple like Eg: steps: ['./step_definitions/steps.js', './step_definitions/tablesteps.js']
}



-------

Below you can find the documentation
https://codecept.io/basics







Plugins: plugins and its usage. this plugins can be added in codecept.conf.js if required
-------
retryFailedStep - this is for retrying failed step
screenshotOnFail - this is to take screenshot on failure
stepByStepReport - this is to take screenshot on each step

Eg:
plugins: {
	retryFailedStep: {
		enabled: true
	},
	screenshotOnFail: {
		enabled: true
	},
	stepByStepReport: {
		enabled: true
	}
}








Notes:
------

We can add multiple Scenario in each test file. Meaning multiple tests in each file.
We can point the test file in codecept.conf.js Eg: tests: './*Tests.js'

npx codeceptjs run --steps    //This will print steps while running
npx codeceptjs run --grep 'give scenario name'     //This to run the single test







